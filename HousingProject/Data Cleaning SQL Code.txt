Nashville Housing Project SQL Code (PostgreSQL)*/ Populate property address data */SELECT * FROM nashvillehousing--WHERE propertyaddress IS NULLORDER BY ParcelID;SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, COALESCE(a.PropertyAddress,b.PropertyAddress) FROM nashvillehousing a JOIN nashvillehousing b ONa.ParcelID = b.ParcelIDAND a.UniqueID != b.UniqueIDWHERE a.PropertyAddress IS NULL;Update nashvillehousingSET PropertyAddress = COALESCE(a.PropertyAddress,b.PropertyAddress) FROM nashvillehousing a JOIN nashvillehousing b ONa.ParcelID = b.ParcelIDAND a.UniqueID != b.UniqueIDWHERE a.PropertyAddress IS NULL;*/ Splitting address into individual columns (address, city, state) */SELECT SUBSTRING(PropertyAddress,1,POSITION(',' in PropertyAddress)-1) AS Address,SUBSTRING(PropertyAddress,POSITION(',' in PropertyAddress)+1,LENGTH(PropertyAddress))AS AddressFROM nashvillehousing;ALTER TABLE NashvillehousingADD COLUMN PropertySplitAddress VARCHAR(255);UPDATE NashvillehousingSET PropertySplitAddress = SUBSTRING(PropertyAddress,1,POSITION(',' in PropertyAddress)-1)ALTER TABLE NashvillehousingADD COLUMN PropertySplitCity VARCHAR(255);UPDATE NashvillehousingSET PropertySplitCity = SUBSTRING(PropertyAddress,POSITION(',' in PropertyAddress)+1,LENGTH(PropertyAddress))SELECT * FROM nashvillehousing;SELECT SPLIT_PART(Owneraddress,',',1), SPLIT_PART(Owneraddress,',',2), SPLIT_PART(Owneraddress,',',3) FROM nashvillehousing;ALTER TABLE nashvillehousingADD OwnerSplitAddress VARCHAR(255);UPDATE nashvillehousingSET OwnerSplitAddress = SPLIT_PART(Owneraddress,',',1)ALTER TABLE nashvillehousingADD OwnerSplitCity VARCHAR(255);UPDATE nashvillehousingSET OwnerSplitCity = SPLIT_PART(Owneraddress,',',2)ALTER TABLE nashvillehousingADD OwnerSplitState VARCHAR(255);UPDATE nashvillehousingSET OwnerSplitState = SPLIT_PART(Owneraddress,',',3)*/ Change Y and N to Yes and No in ÒSold as vacantÓ field */SELECT soldasvacant, CASEWHEN soldasvacant = 'Y' THEN 'Yes' WHEN soldasvacant = 'N' THEN 'No'ELSE soldasvacantEND FROM nashvillehousing;UPDATE nashvillehousingSET soldasvacant = CASEWHEN soldasvacant = 'Y' THEN 'Yes' WHEN soldasvacant = 'N' THEN 'No'ELSE soldasvacantEND*/ Deleting Duplicates */DELETE FROM nashvillehousingWHERE UniqueID IN (SELECT UniqueID FROM (     SELECT UniqueID, ROW_NUMBER() OVER (PARTITION BY ParcelID,             PropertyAddress,             SalePrice,             SaleDate,             LegalReference    ORDER BY UniqueID) row_numFROM nashvillehousing) tWHERE t.row_num >1);*/ Delete Unused Columns */ALTER TABLE nashvillehousingDROP COLUMN propertyaddress, DROP COLUMN taxdistrict,DROP COLUMN owneraddress;